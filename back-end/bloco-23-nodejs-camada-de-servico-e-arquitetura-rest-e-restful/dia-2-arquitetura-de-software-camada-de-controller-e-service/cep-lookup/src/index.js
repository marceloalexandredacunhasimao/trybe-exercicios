/*
 ExercÃ­cio 2

    Crie o endpoint GET /cep/:cep
        O endpoint deve receber, no parÃ¢metro :cep, um nÃºmero de CEP vÃ¡lido;
        O CEP precisa conter 8 dÃ­gitos numÃ©ricos e pode ou nÃ£o possuir traÃ§o;
            ðŸ‘€ De olho na dica: utilize o regex \d{5}-?\d{3} para validar o CEP;
        Caso o CEP seja invÃ¡lido, retorne o status 400 Bad Request e o seguinte JSON:

{ "error": { "code": "invalidData", "message": "CEP invÃ¡lido" } }

    Caso o CEP seja vÃ¡lido, realize uma busca no banco de dados;
        Caso o CEP nÃ£o exista no banco de dados, retorne o status 404 Not Found e o seguinte JSON:

{ "error": { "code": "notFound", "message": "CEP nÃ£o encontrado" } }

- Caso o CEP exista, retorne o status `200 OK` e os dados do CEP no seguinte formato:

{
  "cep": "01001-000",
  "logradouro": "PraÃ§a da SÃ©",
  "bairro": "SÃ©",
  "localidade": "SÃ£o Paulo",
  "uf": "SP",
}
*/
const PORT = 3000;

require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');

const cepLookup = require('./controllers/cep');

const app = express();
app.use(bodyParser.json());

app.get('/ping',cepLookup.ping);
app.get('/cep/:cep',cepLookup.getCep);

app.listen(PORT, () => console.log(`Ouvindo na porta ${PORT}`));
