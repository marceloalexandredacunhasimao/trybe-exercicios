/*
Exerc√≠cio 2

    Crie o endpoint GET /cep/:cep
        O endpoint deve receber, no par√¢metro :cep, um n√∫mero de CEP v√°lido;
        O CEP precisa conter 8 d√≠gitos num√©ricos e pode ou n√£o possuir tra√ßo;
            üëÄ De olho na dica: utilize o regex \d{5}-?\d{3} para validar o CEP;
        Caso o CEP seja inv√°lido, retorne o status 400 Bad Request e o seguinte JSON:

{ "error": { "code": "invalidData", "message": "CEP inv√°lido" } }

    Caso o CEP seja v√°lido, realize uma busca no banco de dados;
        Caso o CEP n√£o exista no banco de dados, retorne o status 404 Not Found e o seguinte JSON:

{ "error": { "code": "notFound", "message": "CEP n√£o encontrado" } }

- Caso o CEP exista, retorne o status `200 OK` e os dados do CEP no seguinte formato:

{
  "cep": "01001-000",
  "logradouro": "Pra√ßa da S√©",
  "bairro": "S√©",
  "localidade": "S√£o Paulo",
  "uf": "SP",
}
*/
const cepLookup = require('../models/cep');

async function getCep(cep) {
	const CEP_REGEX = /\d{5}-\d{3}/;
	if(!CEP_REGEX.test(cep)) {
		return {
			err: { "error": { "code": "invalidData", "message": "CEP inv√°lido" } },
			status: 400,
		};
	}
	const result = await cepLookup.getCep(cep);
	if(!result) {
		return {
			err: { "error": { "code": "notFound", "message": "CEP n√£o encontrado" } },
			status: 404,
		};
	}
	return result;
}

module.exports = {
	getCep,
};
